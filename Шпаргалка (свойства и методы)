Инициализация:
--------------

from selenium import webdriver
browser = webdriver.Chrome()

Как открыть ссылку:
--------------------
browser.get("url")

Как найти элемент:
--------------------
browser.find_element_by_tag_name
browser.find_element_by_name
browser.find_element_by_class_name
browser.find_element_by_id
browser.find_element_by_xpath
browser.find_element_by_css_selector
browser.find_element_by_link_text (это тот самый текст, который содержится между открывающим и закрывающим тегом <a> вот тут </a>)
browser.find_element_by_partial_link_text

По значению атрибута:
browser.find_element_by_css_selector("[value='robots']")
browser.find_element_by_css_selector("[for='python']")

Другой вариант:
from selenium.webdriver.common.by import By
browser = webdriver.Chrome()
button = browser.find_element(By.ID, "submit_button")

Поля класса By, которые можно использовать для поиска:

By.ID – поиск по уникальному атрибуту id элемента;
By.CSS_SELECTOR – поиск элементов с помощью правил на основе CSS;
By.XPATH – поиск элементов с помощью языка запросов XPath;
By.NAME – поиск по атрибуту name элемента;
By.TAG_NAME – поиск по названию тега;
By.CLASS_NAME – поиск по атрибуту class элемента;
By.LINK_TEXT – поиск ссылки с указанным текстом. Текст ссылки должен быть точным совпадением;
By.PARTIAL_LINK_TEXT – поиск ссылки по частичному совпадению текста.

Все эти способы возвращают найденный объект, у которого есть разные методы.

Можно также находить несколько элементов сразу и сохранять их в список.

Методы найденных объектов:
---------------------------
smth.click()
smth.get_attribute('attr') - None если атрибута нет, true если есть без значения, значение аргумента если есть
smth.text - получить текст между тегов: <span class="hover-only">ilen ivory</span> - ilen ivory
smth.send_keys - что-то набрать

выбор из выпадающего списка:
from selenium.webdriver.support.ui import Select
select = Select(browser.find_element_by_tag_name("select"))
select.select_by_value(value) # ищем элемент с текстом "Python"
Можно использовать еще два метода: select.select_by_visible_text("text") и select.select_by_index(index). 
Первый способ ищет элемент по видимому тексту.
Второй способ ищет элемент по его индексу или порядковому номеру. Индексация начинается с нуля. 

Скроллинг экрана:
------------------
browser.execute_script("arguments[0].scrollIntoView(true);", element) - скроллинг к ранее найденному элементу element
По умолчанию в качестве аргумента, передаваемого в функцию scrollIntoView используется true - указывает на то, что элемент нужно скролить к верхней границе окна.
Если передавать false - то элемент будет скролиться к нижней границе окна.

Также можно проскролить всю страницу целиком на строго заданное количество пикселей. Эта команда проскроллит страницу на 100 пикселей вниз:

browser.execute_script("window.scrollBy(0, 100);")

Как загрузить файл:
-------------------
import os
current_dir = os.path.abspath(os.path.dirname(__file__))    # получаем путь к директории текущего исполняемого файла 
file_path = os.path.join(current_dir, 'file.txt')           # добавляем к этому пути имя файла 
browser.find_element_by_css_selector("[type='file']").send_keys(file_path)

Всплывающие окна:
--------
Алерты:
alert = browser.switch_to.alert
alert.accept()

У алерта тоже можно получить текст:
alert_text = alert.text

Другой вариант модального окна, который предлагает пользователю выбор согласиться с сообщением или отказаться от него, называется confirm. 
Для переключения на окно confirm используется та же команда, что и в случае с alert:

confirm = browser.switch_to.alert
confirm.accept()

Для confirm-окон можно использовать следующий метод для отказа:

confirm.dismiss()

Третий вариант модального окна — prompt — имеет дополнительное поле для ввода текста. Чтобы ввести текст, используйте метод send_keys():

prompt = browser.switch_to.alert
prompt.send_keys("My answer")
prompt.accept()

Переход на новую вкладку
-------------------------
Как и с алертом, делается через browser.switch_to:
browser.switch_to.window(window_name), где window_name получается через browser.window_handles[индекс] (индексы идут с нуля)
текущая вкладка: current_window = browser.current_window_handle